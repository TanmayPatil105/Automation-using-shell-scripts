#!/bin/bash

COLS=$(tput cols)
RED='\e[31m'
GREEN='\e[32m'
CYAN='\e[36m'
ENDCOLOR="\e[0m"
IFS=$'\n'


# Displays list of available networks
function command_list() {
	if [ $(nmcli radio wifi) == "enabled" ]
	then
		if [ `expr $COLS` -lt  110 ]
		then
			resize -s 24 110 > /dev/null
		fi

		nmcli dev wifi list > /tmp/wifi.txt

		i=1
		for line in $(cat /tmp/wifi.txt )
		do  
			c=$(echo "${line}" | awk '{print $1}')
			if [ "$c" == "*" ]
			then
				echo -ne $GREEN
				echo  -e "${line}" $ENDCOLOR
			elif    [ $i == 1 ]
			then
				echo -ne $RED
				echo -e "${line}" $ENDCOLOR
				i=2
			else
				echo -ne $CYAN
				echo -e "${line}"$ENDCOLOR
			fi
		done

		rm /tmp/wifi.txt

	else 
		echo "Wifi is disabled"
		exit 1
	fi
	exit 0
}

#Connects to given SSID
function command_connect() {
    shift
    found=0
    for ssid in `nmcli -g name con show --active` 
    do 
         if [[ "$ssid" == "$@" ]]  
         then
         	found=1
            break
         fi
    done
    if [[ "$found" -eq 1 ]] 
    then 
		echo "Wifi already connected to the same Network" 
		echo -e "\nTry turning wifi off to$GREEN REFRESH$ENDCOLOR the Network"
    else
		echo "Connecting..."
		! eval "nmcli dev wifi connect '$@'" >> /dev/null || echo -e "Successfully connected to $GREEN'$@'$ENDCOLOR "
    fi
    exit 0
}

# Turns wifi on
function command_on() {
	if [ $(nmcli radio wifi) == "enabled" ]
	then
		echo "Wifi is already enabled"
	else 
		nmcli radio wifi on
		echo "Turned ON WIFI"
	fi
	exit 0
}

# Turns wifi off
function command_off() {
    if [ $(nmcli radio wifi) == "disabled" ]
	then 
		echo "Wifi is already disabled"
	else 
		nmcli radio wifi off
		echo "Turned OFF WIFI"
	fi
	exit 0
}

# Returns wifi status
function command_status() {
	if [ $(nmcli radio wifi) == "disabled" ]
	then 
		echo "Wifi is DISABLED"
	else 
		echo "Wifi is ENABLED"
	fi
	exit 0
}

# Displays wifi or Hotspot password
function command_pass() {
    if [ $(nmcli radio wifi) == "disabled" ]
    then
		echo "Wifi is already disabled"
    else
        nmcli dev wifi show-password
	fi
	exit 
}

# Displays all saved wifi networks
function command_saved() {
	file=()
	while IFS= read -r line; do
   		 file+=( "$line" )
	done < <(cd /etc/NetworkManager/system-connections ;ls)

	i=0
	list=()
	while IFS= read -r line; do
                 list+=( "$line" )
    done < <(while [ $i -lt  ${#file[@]} ]
			do
				echo  "${file[$i]}" | cut -d'.' -f 1
				i=`expr $i + 1`
    		done) 

	printf "${GREEN}%s${ENDCOLOR}\n" "${list[@]}"
	exit 
}

# Turns Hotspot on
function command_hotspot() {
	if [ $# == 1 ]
	then
		if [ $(nmcli radio wifi) == "disabled" ]
		then
			echo "Wifi is turned off!"
			echo "Turn ON wifi"
			echo "Try \"wifi --help or wifi -h\" for help"
			exit 1
		fi
		timeout 5s echo "Setting up Hotspot..."
		nmcli con up Hotspot > /dev/null
		echo "Hotspot is Turned ON"
		timeout 3s echo "Showing Password..." > /dev/null
		nmcli dev wifi show-password
		exit $?
	fi
	if [ $# == 2 -a $2 == "off" ]
	then	
		if [ $(nmcli radio wifi) == "disabled" ]
		then
			echo "Hotspot is already disabled"
			exit 1
		fi
		timeout 3s echo "Turning Hotspot OFF..."
		nmcli con down Hotspot > /dev/null
		echo "Hotspot is Turned OFF"
		exit $?
	fi

	exit 0
}

#Test Network speed
function command_test() {
	if [ $(nmcli radio wifi) == "disabled" ]
	then
		echo "Wifi is turned off!"
		echo "Turn on Wi-Fi"
		echo "Try \"wifi --help or wifi -h\" for more information"
		exit 1
	fi
	python3 <(curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py)
	exit 0
}

#Reconnect to connected network
function command_recon() {
	if [ $(nmcli radio wifi) == "disabled" ]
	then
		echo "Wifi is turned off!"
		echo "Turn on Wi-Fi"
		echo "Try \"wifi --help or wifi -h\" for more information"
		exit 1
	fi
	SSID=$(nmcli -t -f active,ssid dev wifi | egrep '^yes' | cut -b 5-)
	if [ -z "$SSID" ]
	then
		echo -e "Wi-Fi$RED NOT$ENDCOLOR connected to Network"
		echo -e "Try $GREEN\"wifi connect SSID\"$ENDCOLOR to Connect to a Network"
		exit 1
	fi
	echo -e "Saving SSID..."
	timeout 3s echo -e "Reconnecting to $GREEN'$SSID'$ENDCOLOR..."
	nmcli dev wifi connect $SSID >> /dev/null && echo -e "Successfully re-connected to $GREEN'$SSID'$ENDCOLOR!"
	exit $?
}

# Forget a wifi network
function command_forget() {
    shift
    eval "sudo rm '/etc/NetworkManager/system-connections/$@.nmconnection'"
    exit 0
}

if [ $# == 0 ]
then
	echo "Try wifi --help or wifi -h for more information"
	exit $?
fi

if [ $1 == "--help" -o $1 == "-h" ]
then
	cat <<-EOMD
			wifi is a tool for managing WIFI-Network through command line

			Usage: 
					
			>		wifi <command> [arguments]

			The commands are:

			>		on              turn wifi on
			>		off             turn wifi off
			>		status          returns wifi status (on/off)
			>		list            list available wifi networks
			>		connect $SSID   	connect to a wifi network
			>		pass            get password of current network
			>		saved           list all saved networks
			>		hotspot         to turn on wifi hotspot
			>		hotspot off     to turn off wifi hotspot
			>		forget $SSID    	to forget a network
			>		recon           to reconnect to connected network
			>		test 		to test Network speed
			>		--help, -h      to list all available commands

			EOMD
	exit 0
fi

command="command_$1"
if [[ $(type -t $command) != "function" ]]; then
    echo -e "wifi: '$1' is not a command\n"    
    echo "Run 'wifi --help' or 'wifi -h' to see a list of wifi commands"    
    exit 1
fi

"$command" "$@"
